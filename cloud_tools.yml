---

#
# This installs a selection of tools useful for working with cloud environments
# Install latest ansible with :
#
#   sudo apt install --no-install-recommends software-properties-common
#   sudo add-apt-repository ppa:ansible/ansible
#   sudo apt install --no-install-recommends ansible
#
# Create a hosts file with the following contents
#
#   localhost ansible_connection=local ansible_python_interpreter=/usr/bin/python3
#
# Install with
#
#   ansible-playbook -K -i hosts cloud_tools.yml -l localhost

- hosts: all
  gather_facts: true

  vars:
    # Default list of tools
    cloud_default_tools:
      - minikube
      - kind
      - kubernetes
      - skaffold
      - helm
      - docker-machine
      - docker-compose
      - dive
      - dlayer
      - awscli
      - gimme-aws-creds
      - ecs-cli
      - eksctl
      - azure-cli
      - hammer

    # This variable can be overridden on the cmdline to select which tools to install
    cloud_tools: "{{ cloud_default_tools }}"

    # We need these tools for the playbook to work
    cloud_prereq_packages:
      common:
        - bash-completion
        - gpg-agent
        - python{{ ansible_python.version.major }}-setuptools
        - python{{ ansible_python.version.major }}-pip
        - python{{ ansible_python.version.major }}-jmespath
        - unzip
      focal: []
      bionic:
      - python-jmespath
      xenial:
      - python-jmespath

    cloud_pip_packages:
      # - awscli
      - gimme-aws-creds

    # Generic aws configs if they don't already exist
    # Fill in your own creds later
    cloud_aws_configs:
      - src: |
          [default]
          region = us-east-1
        dest: config
        mode: '0644'
      - src: |
          [default]
          aws_access_key_id =
          aws_secret_access_key =
        dest: credentials
        mode: '0600'

    # Packages available via PPA for Ubuntu
    cloud_ppa_packages:
      - name: kubernetes
        # Ugly - they only have a xenial version for xenial/bionic
        # TODO - handle all distros cleanly
        repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
        key: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        packages:
          - kubectl
          - kubeadm
      - name: azure-cli
        repo: "deb https://packages.microsoft.com/repos/azure-cli/ {{ ansible_distribution_release }} main"
        key: https://packages.microsoft.com/keys/microsoft.asc
        packages:
          - azure-cli
      - name: helm
        repo: "deb https://baltocdn.com/helm/stable/debian/ all main"
        key: https://baltocdn.com/helm/signing.asc
        packages:
          - helm
      - name: hammer
        repo: "deb http://deb.theforeman.org/ {{ ansible_distribution_release }} nightly"
        key: https://deb.theforeman.org/foreman.asc
        packages:
          - ruby-hammer-cli
          - ruby-hammer-cli-foreman

    # Which tools to install from github
    # repo:       Where to find this tool on github
    # filename:   Final /usr/local/bin/<filename>
    # type:     archive - these are unpacked into /usr/local/bin unless unpack: is specified
    #           exe     - these are just direct executables, raw and unfiltered
    #                     placed in /usr/local/bin
    #           deb     - release has an ordinary .deb that can be installed
    # completion: Name of zsh/bash completion file in url or NONE
    # jmesquery:  Query to identify the exact download url we want
    cloud_git_tools:
      # Super annoying, docker-{machine,compose} use DIFFERENT completion filenames
      - repo: docker/machine
        filename: docker-machine
        type: exe
        completion_zsh: _docker-machine
        completion_bash: docker-machine.bash
        jmesquery: "assets[? ends_with (browser_download_url, 'Linux-x86_64')].browser_download_url"
      - repo: docker/compose
        filename: docker-compose
        type: exe
        completion_zsh: _docker-compose
        completion_bash: docker-compose
        jmesquery: "assets[? ends_with (browser_download_url, 'Linux-x86_64')].browser_download_url"
      # dive - nice docker image analysis tool
      - repo: wagoodman/dive
        filename: dive
        type: deb
        completion_zsh: NONE
        completion_bash: NONE
        jmesquery: "assets[? ends_with (browser_download_url, 'amd64.deb')].browser_download_url"
      - repo: kubernetes-sigs/kind
        filename: kind
        type: exe
        completion_zsh: NONE
        completion_bash: NONE
        jmesquery: "assets[? ends_with (browser_download_url, 'linux-amd64')].browser_download_url"
      - repo: weaveworks/eksctl
        filename: eksctl
        type: archive
        completion_zsh: NONE
        completion_bash: NONE
        jmesquery: "assets[? ends_with (browser_download_url, 'Linux_amd64.tar.gz')].browser_download_url"

    # Packages that are direct downloads of the binary
    cloud_binary_tools:
      - name: minikube
        url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        dest: /usr/local/bin/minikube
      - name: skaffold
        url: https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
        dest: /usr/local/bin/skaffold
      - name: dlayer
        url: https://s3.amazonaws.com/wercker-development/dlayer/master/latest/linux_amd64/dlayer
        dest: /usr/local/bin/dlayer
      - name: ecs-cli
        url: https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest
        dest: /usr/local/bin/ecs-cli

    # This template is used
    # to build a set_fact with all required info about each tool
    # It requires that the items are done like (in the task) :
    #    with_together:
    #      - "{{ cloud_git_releases.results }}"
    #      - "{{ cloud_git_tools }}"
    cloud_tools_template:
      filename: "{{ item.1.filename }}"
      version: "{{ item.0.json.tag_name }}"
      type: "{{ item.1.type }}"
      url: "{{ item[0].json | to_json | from_json | json_query(item[1].jmesquery) }}"

  tasks:
    - pause:
        prompt: |
          #---------------------------
          |   Installing these tools
          {% for tool in cloud_tools %}
          |     - {{ tool }}
          {% endfor %}
          #---------------------------


    - become: yes
      block:

      #
      # Prerequisites
      #

      # https repos won't go through apt-cacher, so bypass them
      # NOTE: This has url patterns matching https repos from below
      - name: Copy apt config to bypass any apt-cacher-ng or other proxy
        copy:
          content: |
            # apt-cacher-ng doesn't like going through ssl
            Acquire::https::Proxy::packages.microsoft.com "DIRECT";
            Acquire::https::Proxy::baltocdn.com "DIRECT";
            Acquire::https::Proxy::apt.kubernetes.io "DIRECT";
            Acquire::https::Proxy::packages.cloud.google.com "DIRECT";
          dest: /etc/apt/apt.conf.d/11cloud_tools

      - name: Install prerequisite tools
        apt:
          state: present
          install_recommends: no
          name: "{{ cloud_prereq_packages.common }} + {{ cloud_prereq_packages[ansible_distribution_release] }}"


      #
      # Install tools via python pip
      #
      # Stupid ansible - can't just pass a with_items list into apt now, have to
      # have all the pkgs right on the name: line.  So here we build a variable
      # to hold the list of pkgs that are in the cloud_tools var
      - name: Build list of pip  packages to install
        set_fact:
          packages_via_pip: "{{ packages_via_pip | default([]) + [ item ] }}"
        with_items: "{{ cloud_pip_packages }}"
        when: item in cloud_tools

      # Only run when NOT in check mode, as python pkg_resources may not yet
      # have been installed
      - name: Install packages via pip
        pip:
          name: "{{ packages_via_pip }}"
          state: present
          extra_args: "--upgrade"
        when:
          - packages_via_pip is defined
          - packages_via_pip | length > 0
          - ansible_check_mode == false


      #
      # Install awscli v2
      #
      - when: '"awscli" in cloud_tools'
        block:
        #
        - name: Ensure config dirs are there
          file:
            path: "/home/{{ ansible_user_id }}/{{ item }}"
            state: directory
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"
          with_items:
            - .aws

        - name: Copy .aws configuration files if not there
          copy:
            content: "{{ item.src }}"
            dest: /home/{{ ansible_user_id }}/.aws/{{ item.dest }}
            force: no
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"
            mode: "{{ item.mode }}"
          with_items: "{{ cloud_aws_configs }}"

        - name: Fetch awscli v2 latest
          unarchive:
            src: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
            remote_src: yes
            dest: "/tmp"
            creates: "/tmp/aws"

        - name: Install awscli v2
          command: /tmp/aws/install
          args:
            creates: /usr/local/bin/aws

        - name: Clean up
          file:
            path: /tmp/aws
            state: absent


      #
      # Install tools via PPA
      #
      - name: Add repo key for {{ item.name }}
        apt_key:
          url: "{{ item.key }}"
          state: present
        loop: "{{ cloud_ppa_packages }}"
        when: item.name in cloud_tools

      - name: Install repo for {{ item.name }}
        apt_repository:
          repo: "{{ item.repo }}"
          state: present
          update_cache: yes
        # with_items: "{{ cloud_ppa_packages }}"
        loop: "{{ cloud_ppa_packages }}"
        when: item.name in cloud_tools

      - name: Install {{ item.name }} tool(s) from PPA
        apt:
          state: present
          install_recommends: no
          name: "{{ item.packages }}"
        loop: "{{ cloud_ppa_packages }}"
        when: item.name in cloud_tools


      #
      # Install binary tools directly
      #
      - name: Add binary tool
        get_url:
          url: "{{ item.url }}"
          dest: "{{ item.dest }}"
          mode: 0755
        with_items: "{{ cloud_binary_tools }}"
        when: item.name in cloud_tools


      #
      # Tools from github
      #
      - name: Get latest release for each git package in cloud_tools
        uri:
          url: "https://api.github.com/repos/{{ item.repo }}/releases/latest"
          method: GET
          return_content: true
          status_code: 200
          body_format: json
          validate_certs: false
          force_basic_auth: no
        register: cloud_git_releases
        until: cloud_git_releases.status == 200
        retries: 5
        with_items: "{{ cloud_git_tools }}"
        when: item.filename in cloud_tools
        check_mode: no

      - name: Build list of tools, versions, urls
        set_fact:
          cloud_tools_info: "{{ cloud_tools_info | default([]) + [ cloud_tools_template ] }}"
        with_together:
          - "{{ cloud_git_releases.results }}"
          - "{{ cloud_git_tools }}"
        when: item.1.filename in cloud_tools
        check_mode: no

      - name: Install tool executables to /usr/local/bin
        get_url:
          url: "{{ item.url[0] }}"
          dest: "/usr/local/bin/{{ item.filename }}"
          mode: 0755
        with_items: "{{ cloud_tools_info }}"
        when:
          - item.type == "exe"
          - item.filename in cloud_tools

      - name: Download and install archive type tool
        unarchive:
          src: "{{ item.url[0] }}"
          remote_src: yes
          dest: "/usr/local/bin"
          creates: "/usr/local/bin/{{ item.filename }}"
          mode: 0755
        with_items: "{{ cloud_tools_info }}"
        when:
          - item.type == "archive"
          - item.filename in cloud_tools

      - name: Install deb packages
        apt:
          deb: "{{ item.url[0] }}"
        with_items: "{{ cloud_tools_info }}"
        when:
          - item.type == "deb"
          - item.filename in cloud_tools


      #
      # Install shell completions
      # Will only work if bash-completion is installed for bash
      #
      - name: Check if zsh available
        stat:
          path: /usr/bin/zsh
        register: zsh_installed
        check_mode: no

      - name: Fetch zsh completion for the tools
        get_url:
          url: https://raw.githubusercontent.com/{{ item.repo }}/master/contrib/completion/zsh/{{ item.completion_zsh }}
          dest: /usr/share/zsh/vendor-completions/{{ item.completion_zsh }}
        with_items:
          - "{{ cloud_git_tools }}"
        when:
          - item.completion_zsh != "NONE"
          - zsh_installed.stat.exists
          - item.filename in cloud_tools

      - name: Fetch bash completion for the tools
        get_url:
          url: https://raw.githubusercontent.com/{{ item.repo }}/master/contrib/completion/bash/{{ item.completion_bash }}
          dest: /etc/bash_completion.d/{{ item.completion_bash }}
        with_items:
          - "{{ cloud_git_tools }}"
        when:
          - item.completion_bash != "NONE"
          - item.filename in cloud_tools

      - name: Create zsh completion for tools that generate configs
        shell: "{{ item }} completion zsh > /usr/share/zsh/vendor-completions/_{{ item | basename }}"
        args:
          creates: "/usr/share/zsh/vendor-completions/_{{ item | basename }}"
        with_items:
          - /usr/bin/kubectl
          - /usr/bin/kubeadm
          - /usr/local/bin/minikube
          - /usr/local/bin/eksctl
          - /usr/local/bin/kind
          - /usr/local/bin/skaffold
        when:
          - zsh_installed.stat.exists
          - item | basename  in cloud_tools

      - name: Create bash completion for tools that generate configs
        shell: "{{ item }} completion bash > /etc/bash_completion.d/_{{ item | basename }}"
        args:
          creates: "/etc/bash_completion.d/_{{ item | basename }}"
        with_items:
          - /usr/bin/kubectl
          - /usr/bin/kubeadm
          - /usr/local/bin/minikube
          - /usr/local/bin/eksctl
          - /usr/local/bin/kind
          - /usr/local/bin/skaffold
        when:
          - item | basename in cloud_tools

      # bash completion already installed by package
      - name: Create Azure cli zsh completion
        file:
          src: /etc/bash_completion.d/azure-cli
          dest: /usr/share/zsh/vendor-completions/_azure-cli
          state: link
          force: yes
        when:
          - zsh_installed.stat.exists
          - '"azure_cli" in cloud_tools'

      - name: Create AWS cli zsh completion
        file:
          src: /usr/local/bin/aws_zsh_completer.sh
          dest: /usr/share/zsh/vendor-completions/_aws
          state: link
          force: yes
        when:
          - zsh_installed.stat.exists
          - '"awscli" in cloud_tools'

      - name: Create AWS cli bash completion
        file:
          src: /usr/local/bin/aws_bash_completer
          dest: /etc/bash_completion.d/_aws
          state: link
          force: yes
        when:
          - '"awscli" in cloud_tools'

      #
      # block

